<?php

/**
 * @file
 * Enables poll result to display in graphical represantation. overwride Poll
 * teaser view layout to display in a graphical lahyout.
 */

/**
 * Implements hook_view().
 */
 global $file_global_upload_max_size;
 $file_global_upload_max_size=variable_get('file_global_upload_max_size', 2);

 
function sakal_utility_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'poll') {
    $node->content['poll_view_results']['#markup'] =
      sakal_utility_graph_view($node);
  }
}
 
/**
 * Implements hook_block_info().
 */
function sakal_utility_block_info() {
  $blocks['recent_poll']['info'] = t('Poll Block');
  $blocks['recent_poll']['properties']['administrative'] = TRUE;
  
  $blocks['all_applications']['info'] = t('All Applications');
  $blocks['all_applications']['properties']['administrative'] = TRUE;
  
  return $blocks;
}

/**
 * Implements hook_block_view().
 *
 * Generates a block containing the latest poll.
 */
function sakal_utility_block_view($delta = '' ) {
  global $base_url;
  $block = array();
  if (user_access('access content')) {
    switch ($delta) {
      case 'recent_poll':
        // Retrieve the latest poll
        $select = db_select('node', 'n');
        $select->join('poll', 'p', 'p.nid = n.nid');
        $select->fields('n', array('nid'))
        ->condition('n.status', 1)
        ->condition('p.active', 1)
        ->orderBy('n.created', 'DESC')
        ->range(0, 1)
        ->addTag('node_access');
        $record = $select->execute()->fetchObject();
        if ($record) {
          $poll = node_load($record->nid);
          if ($poll->nid) {
            $poll = sakal_utility_block_latest_poll_view($poll);
            $block['subject'] = t('Poll Result');
            $block['content'] = $poll->content;
          }
        }
        break; 
      case 'all_applications': 
        $block= array();    

        // Retrieve all applications link        
        $query  = new EntityFieldQuery();
        $record = $query->entityCondition('entity_type', 'node')
          ->entityCondition('bundle', 'cluster_of_links') 
          ->fieldCondition('field_linktype', 'value', 'All Applications', '=') 
          ->range(0, 1)
          ->execute();
        if ($record) {
          $nids = array_keys($record['node']);
          $nid = $nids[0];
          if ($nid) {
            $node = node_load($nid);
            $input=$node->field_link_details['und'];
            $view_link='';
            $node->title='';
            //  unset($node->field_linktype);
            $block_record_limit=variable_get('block_record_limit', 9);
            if (count($input) > $block_record_limit) {
              $first3Records = array_slice($input, 0, $block_record_limit);
              $node->field_link_details['und']=$first3Records;
              $view_link='<div class="view-header"><a href="' . $base_url . '/node/' . $node->nid . '">View All></a></div>';
            }
            $block['subject'] = t('All Applications');
            $node_view=node_view($node);
            $block['content'] =  $view_link . render($node_view);
          }
        }
        break;  
    }
  return $block;
  }
}

/**
 * Return content for 'latest poll' block.
 *
 * @param $node
 *   The node object to load.
 */
function sakal_utility_block_latest_poll_view($node) {
  $output = '';

  // This is necessary for shared objects because PHP doesn't copy objects, but
  // passes them by reference.  So when the objects are cached it can result in
  // the wrong output being displayed on subsequent calls.  The cloning and
  // unsetting of $node->content prevents the block output from being the same
  // as the node output.
  $node = clone $node;
  unset($node->content);

  // No 'read more' link.
  $node->readmore = FALSE;
  $node->teaser = '';
  $links = array();
 
  if (!empty($node->allowvotes)) {
    $node->content['poll_view_voting'] =
      drupal_get_form('poll_view_voting', $node, TRUE);
    $node->content['links'] = array(
      '#theme' => 'links',
   //  '#links' => $node->links,
      '#weight' => 5,
    );
  }
  else {
    $node->content['poll_view_results'] = array(
      '#markup' => sakal_utility_graph_view($node)
    );
  }
  return $node;
}

function sakal_utility_graph_view(&$node) {
  $labels = $data = array();
  foreach ($node->choice as $i => $choice) {
    $labels[] = $choice['chtext'];
    $data[] = (int) $choice['chvotes'];
  }
  // Include required files with pChart library.
  $name = "pPie";
  pchart_add($name);

  /* Create and populate the pData object */
  $MyData = new pData(); 
  $title=$node->title;
  $title=wordwrap($title,55,"\n");
  
  
  $MyData->addPoints($data,$title); 

  /* Define the absissa serie */

 //$MyData->setAxisXY(0,AXIS_Y);


  $MyData->addPoints($labels,"Labels");


  $MyData->setAbscissa("Labels");

  /* Create the pChart object */
  $myPicture = new pImage(370,300,$MyData);
  

  $myPicture->setFontProperties(array("FontName"=>"sites/intranet.com/libraries/pchart/fonts/verdana.ttf","FontSize"=>8));

  /* Create the pPie object */ 
  $PieChart = new pPie($myPicture,$MyData);
  $PieChart->setSliceColor(0,array("R"=>0,"G"=>100,"B"=>200));
  


//$myPicture->drawText(70,10,$node->title."?",array("R"=>0,"G"=>0,"B"=>0,"Align"=>TEXT_ALIGN_TOPMIDDLE,"FontSize"=>14));
 // $myPicture->drawText(70,20,$node->title."answer me best country best result best state best city best building best show",array("R"=>0,"G"=>0,"B"=>0,"FontSize"=>10));
  //$myPicture->drawLegend(60,20,array("BoxSize"=>5,"R"=>173,"G"=>163,"B"=>83,"Surrounding"=>20,"Family"=>LEGEND_FAMILY_CIRCLE,"FontSize"=>10));
  $myPicture->drawLegend(10,10,array("BoxSize"=>5,"R"=>255,"G"=>255,"B"=>255,"Surrounding"=>20,"FontSize"=>10));
  /* Draw an AA pie chart */ 
  $PieChart->draw2DPie(180,150,array("WriteValues"=>TRUE,"Radius"=>70,"DrawLabels"=>TRUE,"LabelStacked"=>TRUE,"Border"=>TRUE, "ValueR"=>"0", "ValueG"=>"0", "ValueB"=>"0"));

$PieChart->drawPieLegend(250,230);
  /* Write the legend box */ 
  $myPicture->setShadow(FALSE);
  //$PieChart->drawPieLegend(15,40,array("Alpha"=>20));
  file_unmanaged_delete('sites/intranet.com/files/piechart.png');
  $output = file_create_filename('piechart.png', 'sites/intranet.com/files');
  $myPicture->Render($output);
  return '<div id="pchart"><img src="' . file_create_url($output) . '" /></div>';
}

function sakal_utility_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'user-login') {
    $form['name']['#title'] = '';
    $form['name']['#description'] = '';
    $form['name']['#attributes']['placeholder'] = 'Login Id';
    $form['pass']['#description'] = '';
    $form['pass']['#title'] = '';
    $form['pass']['#attributes']['placeholder'] = 'Password';
  }
  
  

  if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id) { 
    $form['actions']['submit']['#submit'][]= 'sakal_utility_node_form_submit_handler';
  }

  switch ($form_id) {
    case 'photo_gallery_node_form':
      $form['#after_build'][] = 'sakal_utility_after_build';
      break;
	case 'system_file_system_settings':
		$form['file_global_upload_max_size'] = array(
		'#type' => 'textfield',
		'#title' => t('File Global Upload Max Size (in MB)'),
		'#default_value' =>variable_get('file_global_upload_max_size',2),
		'#size' => 2,
		'#maxlength' => 2,
		'#element_validate' => array('element_validate_integer_positive'),
		'#description' => t('Global Upload Max File Size (in MB).'),
		'#required' => TRUE,
		);
		return system_settings_form($form);
	  break;
	}
}
/**
 * Implements hook_views_data().
 */
function sakal_utility_views_data() {
  global $user;
  $data = array();
  $data['filedepot_files']['table']['base'] = array(
    'field' => 'fid',
    'title' => t('Filedepot Files'),
    'help' => t("Filedepot files base table"),
    );
  $data['filedepot_files']['table']['join']['file_managed'] = array(
    'left_field' => 'fid',
    'field' => 'drupal_fid',
    );

  $data['filedepot_files']['drupal_fid'] = array(
    'title' => t('Drupal File Id'),
    'help' => t('Some example content that references a node.'),
    'field' => array(
    'handler' => 'views_handler_field_numeric',
    'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
   );
  
  // Example integer field.
  $data['filedepot_files']['version'] = array(
    'title' => t('File Version'),
    'help' => t('File Version'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
  );
  $data['filedepot_files']['cid'] = array(
    'title' => t('Category Id'),
    'help' => t('Some example content that references a node.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'relationship' => array(
      'base' => 'filedepot_categories', // The name of the table to join with.
      'base field' => 'cid', // The name of the field on the joined table.
      'field' => 'cid', //-- see hook_views_data_alter(); not needed here.
      'handler' => 'views_handler_relationship',
      'label' => t('Default label for the relationship'),
      'title' => t('Title shown when adding the relationship'),
      'help' => t('More information on this relationship'),
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
   
  );
 // Applied Role base access 
 $data['filedepot_access']['table']['group'] = t('Filedepot Access');
 $data['filedepot_access']['table']['base'] = array(
    'field' => 'fid',
    'title' => t('Filedepot Access'),
    'help' => t("Filedepot Accesss base table"),
    );
  $data['filedepot_access']['table']['join']['filedepot_categories'] = array(
    'left_field' => 'cid',
    'field' => 'catid',
	/*'extra'      => array(
          array(
            'field'    => 'permid',
            'value'    => $user->uid,
            'operator' => '=',
            'numeric'  => true,
          ),
		  array(
            'field'    => 'permtype',
            'value'    => 'role',
            'operator' => '=',
            'numeric'  => false,
          ),
		   array(
            'field'    => 'view',
            'value'    => '1',
            'operator' => '=',
            'numeric'  => true,
          ),
        )*/
      
    );
	 $data['filedepot_access']['catid'] = array(
    'title' => t('Access Category Id'),
    'help' => t('Some example content that references a node.'),
    'field' => array(
      'handler' => 'views_handler_field_numeric',
      'click sortable' => TRUE,
    ),
    'relationship' => array(
      'base' => 'filedepot_categories', // The name of the table to join with.
      'base field' => 'cid', // The name of the field on the joined table.
      'field' => 'catid', //-- see hook_views_data_alter(); not needed here.
      'handler' => 'views_handler_relationship',
      'label' => t('filedepot_categories with filedepot_access'),
      'title' => t('filedepot_categories with filedepot_access'),
      'help' => t('More information on this relationship'),
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
   
  );
  
   $data['filedepot_access']['permid'] = array(
    'title' => t('Permission Id'),
    'help' => t('Permission id.'),
    'field' => array(
    'handler' => 'views_handler_field_numeric',
    'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
	'relationship' => array(
      'base' => 'users', // The name of the table to join with.
      'base field' => 'uid', // The name of the field on the joined table.
      'field' => 'permid', //-- see hook_views_data_alter(); not needed here.
      'handler' => 'views_handler_relationship',
      'label' => t('filedepot_access_users'),
      'title' => t('filedepot_access_users'),
      'help' => t('More information on this relationship'),
    ),
   );
    $data['filedepot_access']['view'] = array(
    'title' => t('View Access'),
    'help' => t('View Access.'),
    'field' => array(
    'handler' => 'views_handler_field_numeric',
    'click sortable' => TRUE,
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_numeric',
    ),
    'sort' => array(
      'handler' => 'views_handler_sort',
    ),
   );
   
   $data['filedepot_access']['permtype'] = array(
    'title' => t('Permission Type'),
    'help' => t('Permission Type.'),
    'field' => array(
        'handler' => 'views_handler_field',
    ),
    'sort' => array(
        'handler' => 'views_handler_sort',
    ),
    'filter' => array(
        'handler' => 'views_handler_filter_string',
    ),
);

  
  
  
	

  return $data;
}
/**
    Implementation of hook_views_query_alter()
**/
function sakal_utility_views_query_alter(&$view, &$query) {
global $user;
	
 if($view->name == "policy_and_procedures" ) {
	$rids = array_keys($user->roles);
	$query->add_where_expression(0, "filedepot_categories_filedepot_files__filedepot_access.permid in ( :user_role)", array(':user_role' =>$rids));      
	//$query->distinct=TRUE;


 }	 
	
}
function sakal_utility_views_pre_render(&$view) {
  $results = &$view->result;
  if (count($results)>0 && $view->name=='policy_and_procedures' ) {	 	  
    foreach ($results as $key => $result) {
      if (isset($result->file_managed_field_data_filedepot_folder_file__filedepot_fil_1)) {
         $view->result[$key]->file_managed_field_data_filedepot_folder_file__filedepot_fil_1 =
          preg_replace('/\\.[^.\\s]{3,4}$/',
            '',
            $result->file_managed_field_data_filedepot_folder_file__filedepot_fil_1);
      }
    }
  }
}

function sakal_utility_views_api($module = NULL, $api = NULL) {
  return array("api" => "2.0");
}

function sakal_utility_node_validate($node, $form, &$form_state) {  
  if (isset($form_state['values']['date']) && $form_state['values']['date']!='') {  
    $created_date=gmdate("Y-m-d H:i", strtotime($form_state['values']['date']));
    $today=gmdate("Y-m-d H:i", time());
    if (strtotime($created_date)> strtotime($today)) {
      form_set_error('date', t('Authored on should not be future time'));
    }	
  }
}


function sakal_utility_node_form_submit_handler($form, &$form_state) {
  $form_state['redirect']  = $GLOBALS['base_url'];
  $_GET['destination']='/';
  
}


function sakal_utility_block_view_alter(&$data, $block) {
  if(isset($block->subject) && $block->subject=='Alert'){
    $block->homebox_classes=$block->homebox_classes.' alert_widget';
  }
}

function sakal_utility_after_build($form, &$form_state) {
	
  include_file_validation_js_function();
  return $form;
}
function include_file_validation_js_function(){
  global $file_global_upload_max_size;
  $path = drupal_get_path('theme', 'intranet');
  $file_global_upload_max_size_bytes=human2byte($file_global_upload_max_size.'mb');
  drupal_add_js(array('intranet' => array('file_global_upload_max_size' => $file_global_upload_max_size,'file_global_upload_max_size_bytes'=>$file_global_upload_max_size_bytes)), array('type' => 'setting'));
  drupal_add_js ("$path/js/validation.js");
	
}
function human2byte($value) {
  return preg_replace_callback('/^\s*(\d+)\s*(?:([kmgt]?)b?)?\s*$/i', function ($m) {
    switch (strtolower($m[2])) {
      case 't': $m[1] *= 1024;
      case 'g': $m[1] *= 1024;
      case 'm': $m[1] *= 1024;
      case 'k': $m[1] *= 1024;
    }
    return $m[1];
  }, $value);
}
